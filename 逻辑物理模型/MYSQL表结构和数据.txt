/*
 Navicat Premium Data Transfer

 Source Server         : SummerCs
 Source Server Type    : MySQL
 Source Server Version : 50709
 Source Host           : localhost:3306
 Source Schema         : take-away assistant

 Target Server Type    : MySQL
 Target Server Version : 50709
 File Encoding         : 65001

 Date: 14/07/2020 10:35:40
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for administrator
-- ----------------------------
DROP TABLE IF EXISTS `administrator`;
CREATE TABLE `administrator`  (
  `Administrator_name` char(15) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Administrator_pwd` char(15) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Administrator_id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Administrator_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of administrator
-- ----------------------------
INSERT INTO `administrator` VALUES ('我是管理员', '111', 1);
INSERT INTO `administrator` VALUES ('wzw', '111', 2);

-- ----------------------------
-- Table structure for collect_to_get
-- ----------------------------
DROP TABLE IF EXISTS `collect_to_get`;
CREATE TABLE `collect_to_get`  (
  `Consumer_id` int(11) NOT NULL,
  `Coupon_id` int(11) NOT NULL,
  `Merchant_id` int(11) NOT NULL,
  `Collect_now` int(11) NOT NULL,
  PRIMARY KEY (`Consumer_id`, `Coupon_id`, `Merchant_id`) USING BTREE,
  INDEX `FK_Collect_to_get2`(`Coupon_id`) USING BTREE,
  INDEX `FK_Collect_to_get3`(`Merchant_id`) USING BTREE,
  CONSTRAINT `FK_Collect_to_get` FOREIGN KEY (`Consumer_id`) REFERENCES `consumer_information` (`Consumer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Collect_to_get2` FOREIGN KEY (`Coupon_id`) REFERENCES `discount_coupon` (`Coupon_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Collect_to_get3` FOREIGN KEY (`Merchant_id`) REFERENCES `merchant_information` (`Merchant_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of collect_to_get
-- ----------------------------
INSERT INTO `collect_to_get` VALUES (1, 1, 1, 1);
INSERT INTO `collect_to_get` VALUES (2, 1, 1, 1);
INSERT INTO `collect_to_get` VALUES (2, 2, 1, 0);
INSERT INTO `collect_to_get` VALUES (2, 3, 2, 2);

-- ----------------------------
-- Table structure for comment_
-- ----------------------------
DROP TABLE IF EXISTS `comment_`;
CREATE TABLE `comment_`  (
  `Merchandise_id` int(11) NOT NULL,
  `Consumer_id` int(11) NOT NULL,
  `Order_id` int(11) NOT NULL,
  `Comment_content` char(50) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Comment_Date` datetime(0) NOT NULL,
  `Comment_level` int(11) NOT NULL,
  `Comment_picture` longblob NOT NULL,
  PRIMARY KEY (`Merchandise_id`, `Consumer_id`) USING BTREE,
  INDEX `FK_Comment2`(`Consumer_id`) USING BTREE,
  INDEX `FK_Comment3`(`Order_id`) USING BTREE,
  CONSTRAINT `FK_Comment` FOREIGN KEY (`Merchandise_id`) REFERENCES `merchandise_information` (`Merchandise_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Comment2` FOREIGN KEY (`Consumer_id`) REFERENCES `consumer_information` (`Consumer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Comment3` FOREIGN KEY (`Order_id`) REFERENCES `order_` (`Order_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment_
-- ----------------------------
INSERT INTO `comment_` VALUES (3, 2, 2, 'nice', '2020-07-14 10:31:52', 2, 

-- ----------------------------
-- Table structure for consumer_information
-- ----------------------------
DROP TABLE IF EXISTS `consumer_information`;
CREATE TABLE `consumer_information`  (
  `Consumer_id` int(11) NOT NULL AUTO_INCREMENT,
  `Consumer_name` char(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `Consumer_gender` char(3) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `Consumer_pwd` char(20) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Consumer_phonenum` char(11) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `Consumer_mail` char(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `Consumer_city` char(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `Consumer_regdate` datetime(0) NOT NULL,
  `Consumer_member` tinyint(1) NOT NULL,
  `Consumer_memberddl` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`Consumer_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of consumer_information
-- ----------------------------
INSERT INTO `consumer_information` VALUES (1, '我是用户', '男', '111', NULL, NULL, NULL, '2020-07-14 10:18:48', 1, '2020-07-31 10:18:54');
INSERT INTO `consumer_information` VALUES (2, 'wzw', NULL, '111', NULL, NULL, NULL, '2020-07-14 10:20:59', 0, NULL);

-- ----------------------------
-- Table structure for delivery_address
-- ----------------------------
DROP TABLE IF EXISTS `delivery_address`;
CREATE TABLE `delivery_address`  (
  `Address_id` int(11) NOT NULL AUTO_INCREMENT,
  `Consumer_id` int(11) NULL DEFAULT NULL,
  `Address_province` char(15) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `Address_city` char(15) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `Address_region` char(15) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `Address_add` char(20) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Address_linkman` char(10) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Address_phonenum` char(11) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Default_` tinyint(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`Address_id`) USING BTREE,
  INDEX `FK_localtion`(`Consumer_id`) USING BTREE,
  CONSTRAINT `FK_localtion` FOREIGN KEY (`Consumer_id`) REFERENCES `consumer_information` (`Consumer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of delivery_address
-- ----------------------------
INSERT INTO `delivery_address` VALUES (1, 1, '浙江', '杭州', '西湖区', '明德2-314', 'Wen', '15700181042', 1);
INSERT INTO `delivery_address` VALUES (3, 2, '浙江', '昂州', '拱墅区', '明德1-111', 'Wen', '13777837308', 1);

-- ----------------------------
-- Table structure for discount_coupon
-- ----------------------------
DROP TABLE IF EXISTS `discount_coupon`;
CREATE TABLE `discount_coupon`  (
  `Coupon_id` int(11) NOT NULL AUTO_INCREMENT,
  `Merchant_id` int(11) NULL DEFAULT NULL,
  `Discount_price` float NOT NULL,
  `Order_count` int(11) NOT NULL,
  `Starttime` datetime(0) NOT NULL,
  `Finishtime` datetime(0) NOT NULL,
  PRIMARY KEY (`Coupon_id`) USING BTREE,
  INDEX `FK_belong22`(`Merchant_id`) USING BTREE,
  CONSTRAINT `FK_belong22` FOREIGN KEY (`Merchant_id`) REFERENCES `merchant_information` (`Merchant_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of discount_coupon
-- ----------------------------
INSERT INTO `discount_coupon` VALUES (1, 1, 2, 2, '2020-07-01 10:14:44', '2020-07-22 10:14:50');
INSERT INTO `discount_coupon` VALUES (2, 1, 4, 3, '2020-07-02 10:14:44', '2020-07-25 10:14:50');
INSERT INTO `discount_coupon` VALUES (3, 2, 2, 2, '2020-07-01 10:14:44', '2020-07-22 10:14:50');
INSERT INTO `discount_coupon` VALUES (4, 2, 4, 3, '2020-07-02 10:14:44', '2020-07-25 10:14:50');

-- ----------------------------
-- Table structure for full_reduction
-- ----------------------------
DROP TABLE IF EXISTS `full_reduction`;
CREATE TABLE `full_reduction`  (
  `Reduction_id` int(11) NOT NULL AUTO_INCREMENT,
  `Merchant_id` int(11) NULL DEFAULT NULL,
  `Red_Amount` float NOT NULL,
  `Red_Aim` float NOT NULL,
  `Support_coupon` tinyint(1) NOT NULL,
  PRIMARY KEY (`Reduction_id`) USING BTREE,
  INDEX `FK_belong11`(`Merchant_id`) USING BTREE,
  CONSTRAINT `FK_belong11` FOREIGN KEY (`Merchant_id`) REFERENCES `merchant_information` (`Merchant_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of full_reduction
-- ----------------------------
INSERT INTO `full_reduction` VALUES (1, 1, 10, 1, 1);
INSERT INTO `full_reduction` VALUES (2, 1, 15, 2, 1);
INSERT INTO `full_reduction` VALUES (3, 2, 10, 1, 1);
INSERT INTO `full_reduction` VALUES (4, 2, 15, 2, 1);

-- ----------------------------
-- Table structure for merchandise_information
-- ----------------------------
DROP TABLE IF EXISTS `merchandise_information`;
CREATE TABLE `merchandise_information`  (
  `Merchandise_id` int(11) NOT NULL AUTO_INCREMENT,
  `Sort_id` int(11) NULL DEFAULT NULL,
  `Merchant_id` int(11) NULL DEFAULT NULL,
  `Merchandise_name` char(15) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Merchandise_price` float NOT NULL,
  `Disconut_price` float NULL DEFAULT NULL,
  PRIMARY KEY (`Merchandise_id`) USING BTREE,
  INDEX `FK_Belong_to_`(`Merchant_id`) USING BTREE,
  INDEX `FK_Detail`(`Sort_id`) USING BTREE,
  CONSTRAINT `FK_Belong_to_` FOREIGN KEY (`Merchant_id`) REFERENCES `merchant_information` (`Merchant_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Detail` FOREIGN KEY (`Sort_id`) REFERENCES `merchandise_sort` (`Sort_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of merchandise_information
-- ----------------------------
INSERT INTO `merchandise_information` VALUES (1, 1, 1, '五香牛肉汉堡', 15.5, 14);
INSERT INTO `merchandise_information` VALUES (2, 1, 1, '素食汉堡', 12, 10);
INSERT INTO `merchandise_information` VALUES (3, 2, 2, '小炒肉', 18, 15.5);
INSERT INTO `merchandise_information` VALUES (4, 2, 2, '干锅包菜', 14, 13);

-- ----------------------------
-- Table structure for merchandise_sort
-- ----------------------------
DROP TABLE IF EXISTS `merchandise_sort`;
CREATE TABLE `merchandise_sort`  (
  `Sort_id` int(11) NOT NULL AUTO_INCREMENT,
  `Sort_name` char(15) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`Sort_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of merchandise_sort
-- ----------------------------
INSERT INTO `merchandise_sort` VALUES (1, '汉堡');
INSERT INTO `merchandise_sort` VALUES (2, '农家菜');
INSERT INTO `merchandise_sort` VALUES (3, '汤');

-- ----------------------------
-- Table structure for merchant_information
-- ----------------------------
DROP TABLE IF EXISTS `merchant_information`;
CREATE TABLE `merchant_information`  (
  `Merchant_id` int(11) NOT NULL AUTO_INCREMENT,
  `Merchant_name` char(15) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Merchant_level` int(11) NULL DEFAULT NULL,
  `Consume_avgprice` float NULL DEFAULT NULL,
  `Total_sales` int(11) NULL DEFAULT NULL,
  `Merchant_pwd` char(20) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`Merchant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of merchant_information
-- ----------------------------
INSERT INTO `merchant_information` VALUES (1, '肯德基', 4, 5, 1, '111');
INSERT INTO `merchant_information` VALUES (2, 'wzw', 3, 15, 1, '111');

-- ----------------------------
-- Table structure for order_
-- ----------------------------
DROP TABLE IF EXISTS `order_`;
CREATE TABLE `order_`  (
  `Order_id` int(11) NOT NULL AUTO_INCREMENT,
  `Address_id` int(11) NULL DEFAULT NULL,
  `Rider_id` int(11) NULL DEFAULT NULL,
  `Consumer_id` int(11) NULL DEFAULT NULL,
  `Reduction_id` int(11) NULL DEFAULT NULL,
  `Coupon_id` int(11) NULL DEFAULT NULL,
  `Order_orgamount` float NOT NULL,
  `Order_setamount` float NOT NULL,
  `Order_platime` datetime(0) NOT NULL,
  `Order_deltime` datetime(0) NOT NULL,
  `Order_state` char(10) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Comment_Rider` char(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  PRIMARY KEY (`Order_id`) USING BTREE,
  INDEX `FK_Address`(`Address_id`) USING BTREE,
  INDEX `FK_Consumer`(`Consumer_id`) USING BTREE,
  INDEX `FK_Discount`(`Coupon_id`) USING BTREE,
  INDEX `FK_Full_reduction`(`Reduction_id`) USING BTREE,
  INDEX `FK_getorder`(`Rider_id`) USING BTREE,
  CONSTRAINT `FK_Address` FOREIGN KEY (`Address_id`) REFERENCES `delivery_address` (`Address_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Consumer` FOREIGN KEY (`Consumer_id`) REFERENCES `consumer_information` (`Consumer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Discount` FOREIGN KEY (`Coupon_id`) REFERENCES `discount_coupon` (`Coupon_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Full_reduction` FOREIGN KEY (`Reduction_id`) REFERENCES `full_reduction` (`Reduction_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_getorder` FOREIGN KEY (`Rider_id`) REFERENCES `rider_information` (`Rider_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of order_
-- ----------------------------
INSERT INTO `order_` VALUES (1, 3, NULL, 2, 1, 2, 24, 5, '2020-07-14 10:28:12', '2020-07-14 12:28:12', '烹饪中', '未评价');
INSERT INTO `order_` VALUES (2, 3, 1, 2, 3, 3, 32, 15, '2020-07-14 10:30:29', '2020-07-14 12:30:29', '已送达', '好评');

-- ----------------------------
-- Table structure for order_detail
-- ----------------------------
DROP TABLE IF EXISTS `order_detail`;
CREATE TABLE `order_detail`  (
  `Order_id` int(11) NOT NULL,
  `Merchandise_id` int(11) NOT NULL,
  `Merchandise_Count` int(11) NOT NULL,
  PRIMARY KEY (`Order_id`, `Merchandise_id`) USING BTREE,
  INDEX `FK_Order_Detail2`(`Merchandise_id`) USING BTREE,
  CONSTRAINT `FK_Order_Detail` FOREIGN KEY (`Order_id`) REFERENCES `order_` (`Order_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK_Order_Detail2` FOREIGN KEY (`Merchandise_id`) REFERENCES `merchandise_information` (`Merchandise_id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of order_detail
-- ----------------------------
INSERT INTO `order_detail` VALUES (1, 2, 2);
INSERT INTO `order_detail` VALUES (2, 3, 1);
INSERT INTO `order_detail` VALUES (2, 4, 1);

-- ----------------------------
-- Table structure for rider_information
-- ----------------------------
DROP TABLE IF EXISTS `rider_information`;
CREATE TABLE `rider_information`  (
  `Rider_id` int(11) NOT NULL AUTO_INCREMENT,
  `Rider_name` char(10) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Reg_date` datetime(0) NOT NULL,
  `Rider_sort` char(15) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Rider_pwd` char(20) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`Rider_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3 CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of rider_information
-- ----------------------------
INSERT INTO `rider_information` VALUES (1, 'wzw', '2020-07-14 10:25:16', '新手', '111');
INSERT INTO `rider_information` VALUES (2, '我是骑手', '2020-07-14 10:25:42', '新手', '111');

-- ----------------------------
-- View structure for merchant_order
-- ----------------------------
DROP VIEW IF EXISTS `merchant_order`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `merchant_order` AS select `order_`.`Order_id` AS `Order_id`,`merchant_information`.`Merchant_id` AS `Merchant_id`,`merchant_information`.`Total_sales` AS `Total_sales`,`merchant_information`.`Consume_avgprice` AS `Consume_avgprice`,`merchant_information`.`Merchant_name` AS `Merchant_name`,`merchandise_information`.`Merchandise_id` AS `Merchandise_id`,`merchandise_information`.`Merchandise_name` AS `Merchandise_name`,`merchandise_information`.`Merchandise_price` AS `Merchandise_price` from (((`order_` join `order_detail` on((`order_`.`Order_id` = `order_detail`.`Order_id`))) join `merchandise_information` on((`order_detail`.`Merchandise_id` = `merchandise_information`.`Merchandise_id`))) join `merchant_information` on((`merchant_information`.`Merchant_id` = `merchandise_information`.`Merchant_id`)));

-- ----------------------------
-- View structure for view_alldiscount
-- ----------------------------
DROP VIEW IF EXISTS `view_alldiscount`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_alldiscount` AS select `consumer_information`.`Consumer_id` AS `Consumer_id`,`merchant_information`.`Merchant_id` AS `Merchant_id`,`full_reduction`.`Reduction_id` AS `Reduction_id`,`discount_coupon`.`Coupon_id` AS `Coupon_id`,`full_reduction`.`Red_Amount` AS `Red_Amount`,`full_reduction`.`Red_Aim` AS `Red_Aim`,`discount_coupon`.`Discount_price` AS `Discount_price`,`discount_coupon`.`Order_count` AS `Order_count` from ((((`consumer_information` join `merchant_information`) join `collect_to_get`) join `full_reduction`) join `discount_coupon`) where ((`merchant_information`.`Merchant_id` = `full_reduction`.`Merchant_id`) and (`merchant_information`.`Merchant_id` = `collect_to_get`.`Merchant_id`) and (`collect_to_get`.`Consumer_id` = `consumer_information`.`Consumer_id`) and (`full_reduction`.`Support_coupon` = TRUE) and (`collect_to_get`.`Coupon_id` = `discount_coupon`.`Coupon_id`) and (`collect_to_get`.`Collect_now` >= `discount_coupon`.`Order_count`));

-- ----------------------------
-- View structure for view_havingcoupon
-- ----------------------------
DROP VIEW IF EXISTS `view_havingcoupon`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_havingcoupon` AS select `collect_to_get`.`Consumer_id` AS `Consumer_id`,`merchant_information`.`Merchant_name` AS `Merchant_name`,`discount_coupon`.`Discount_price` AS `Discount_price`,`discount_coupon`.`Order_count` AS `Order_count`,`collect_to_get`.`Collect_now` AS `Collect_now`,`discount_coupon`.`Starttime` AS `Starttime`,`discount_coupon`.`Finishtime` AS `Finishtime` from (((`consumer_information` join `merchant_information`) join `collect_to_get`) join `discount_coupon`) where ((`merchant_information`.`Merchant_id` = `collect_to_get`.`Merchant_id`) and (`collect_to_get`.`Consumer_id` = `consumer_information`.`Consumer_id`) and (`collect_to_get`.`Coupon_id` = `discount_coupon`.`Coupon_id`) and (`discount_coupon`.`Finishtime` >= (select now())));

-- ----------------------------
-- View structure for view_loadrecommend
-- ----------------------------
DROP VIEW IF EXISTS `view_loadrecommend`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_loadrecommend` AS select `comment_`.`Comment_picture` AS `Comment_picture`,`comment_`.`Comment_level` AS `Comment_level`,`comment_`.`Comment_content` AS `Comment_content`,`comment_`.`Comment_Date` AS `Comment_Date`,`comment_`.`Order_id` AS `Order_id`,`merchant_information`.`Merchant_name` AS `Merchant_name`,`merchandise_information`.`Merchandise_name` AS `Merchandise_name`,`merchandise_information`.`Merchant_id` AS `Merchant_id`,`consumer_information`.`Consumer_name` AS `Consumer_name` from (((((`merchant_information` join `merchandise_information` on((`merchant_information`.`Merchant_id` = `merchandise_information`.`Merchant_id`))) join `order_detail` on((`merchandise_information`.`Merchandise_id` = `order_detail`.`Merchandise_id`))) join `order_` on((`order_`.`Order_id` = `order_detail`.`Order_id`))) join `comment_` on(((`merchandise_information`.`Merchandise_id` = `comment_`.`Merchandise_id`) and (`order_`.`Order_id` = `comment_`.`Order_id`)))) join `consumer_information` on(((`comment_`.`Consumer_id` = `consumer_information`.`Consumer_id`) and (`order_`.`Consumer_id` = `consumer_information`.`Consumer_id`))));

-- ----------------------------
-- View structure for view_order
-- ----------------------------
DROP VIEW IF EXISTS `view_order`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_order` AS select `order_`.`Order_id` AS `Order_id`,`consumer_information`.`Consumer_id` AS `Consumer_id`,`consumer_information`.`Consumer_name` AS `Consumer_name`,`merchant_information`.`Merchant_id` AS `Merchant_id`,`merchant_information`.`Merchant_name` AS `Merchant_name`,`merchandise_information`.`Merchandise_name` AS `Merchandise_name`,`order_detail`.`Merchandise_Count` AS `Merchandise_Count`,`order_`.`Order_state` AS `Order_state`,`order_`.`Order_platime` AS `Order_platime`,`order_`.`Order_deltime` AS `Order_deltime`,`delivery_address`.`Address_province` AS `Address_province`,`delivery_address`.`Address_city` AS `Address_city`,`delivery_address`.`Address_region` AS `Address_region`,`delivery_address`.`Address_add` AS `Address_add`,`delivery_address`.`Address_linkman` AS `Address_linkman`,`delivery_address`.`Address_phonenum` AS `Address_phonenum`,`order_`.`Comment_Rider` AS `Comment_Rider`,`order_`.`Rider_id` AS `Rider_id` from (((((`order_` join `order_detail`) join `consumer_information`) join `merchandise_information`) join `delivery_address`) join `merchant_information`) where ((`order_`.`Consumer_id` = `consumer_information`.`Consumer_id`) and (`order_`.`Order_id` = `order_detail`.`Order_id`) and (`order_detail`.`Merchandise_id` = `merchandise_information`.`Merchandise_id`) and (`merchant_information`.`Merchant_id` = `merchandise_information`.`Merchant_id`) and (`order_`.`Address_id` = `delivery_address`.`Address_id`));

-- ----------------------------
-- View structure for view_recommend
-- ----------------------------
DROP VIEW IF EXISTS `view_recommend`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_recommend` AS select `merchandise_sort`.`Sort_name` AS `Sort_name`,`consumer_information`.`Consumer_id` AS `Consumer_id`,`order_`.`Order_id` AS `Order_id`,`merchandise_information`.`Merchandise_name` AS `Merchandise_name`,`merchandise_information`.`Merchandise_price` AS `Merchandise_price`,`merchandise_information`.`Disconut_price` AS `Disconut_price`,`merchandise_information`.`Merchandise_id` AS `Merchandise_id`,`merchandise_information`.`Merchant_id` AS `Merchant_id`,`merchandise_sort`.`Sort_id` AS `Sort_id` from ((((`order_detail` join `order_` on((`order_detail`.`Order_id` = `order_`.`Order_id`))) join `consumer_information` on((`order_`.`Consumer_id` = `consumer_information`.`Consumer_id`))) join `merchandise_information` on((`order_detail`.`Merchandise_id` = `merchandise_information`.`Merchandise_id`))) join `merchandise_sort` on((`merchandise_information`.`Sort_id` = `merchandise_sort`.`Sort_id`)));

-- ----------------------------
-- View structure for view_setcomment
-- ----------------------------
DROP VIEW IF EXISTS `view_setcomment`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_setcomment` AS select `merchant_information`.`Merchant_name` AS `Merchant_name`,`merchandise_information`.`Merchandise_name` AS `Merchandise_name`,`order_`.`Order_platime` AS `Order_platime`,`order_`.`Order_id` AS `Order_id`,`order_`.`Consumer_id` AS `Consumer_id`,`merchandise_information`.`Merchandise_id` AS `Merchandise_id`,`merchant_information`.`Merchant_id` AS `Merchant_id` from (((`order_` join `order_detail`) join `merchandise_information`) join `merchant_information`) where ((`order_detail`.`Merchandise_id` = `merchandise_information`.`Merchandise_id`) and (`merchandise_information`.`Merchant_id` = `merchant_information`.`Merchant_id`) and (`order_detail`.`Order_id` = `order_`.`Order_id`) and (`order_`.`Order_state` = '已送达') and (not(exists(select 1 from `comment_` where ((`order_detail`.`Merchandise_id` = `comment_`.`Merchandise_id`) and (`order_detail`.`Order_id` = `comment_`.`Order_id`))))));

-- ----------------------------
-- View structure for view_takeorder
-- ----------------------------
DROP VIEW IF EXISTS `view_takeorder`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_takeorder` AS select `merchant_information`.`Merchant_id` AS `merchant_id`,`merchant_information`.`Merchant_name` AS `merchant_name`,`merchant_information`.`Merchant_level` AS `Merchant_level`,`merchant_information`.`Consume_avgprice` AS `Consume_avgprice`,`merchant_information`.`Total_sales` AS `Total_sales`,`merchandise_information`.`Merchandise_id` AS `merchandise_id`,`merchandise_information`.`Merchandise_name` AS `merchandise_name`,`merchandise_information`.`Merchandise_price` AS `Merchandise_price`,`merchandise_information`.`Disconut_price` AS `Disconut_price`,`merchandise_sort`.`Sort_name` AS `Sort_name` from ((`merchant_information` join `merchandise_information`) join `merchandise_sort`) where ((`merchant_information`.`Merchant_id` = `merchandise_information`.`Merchant_id`) and (`merchandise_information`.`Sort_id` = `merchandise_sort`.`Sort_id`));

SET FOREIGN_KEY_CHECKS = 1;
